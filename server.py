import asyncio
import logging
import os
import time
import threading
import json
from collections import defaultdict, deque
from datetime import datetime, timedelta
from typing import Dict, Set, Optional, List
import aiohttp
from aiohttp import web
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ChatMemberHandler,
    ConversationHandler,
    filters, 
    ContextTypes,
    CallbackContext
)
from telegram.error import TelegramError
import gc
import weakref
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LANGUAGE_SELECTION = 1
CATEGORY_SELECTION = 2
WRITING_POST = 3
DELETE_SELECTION = 4

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_GROUP_ID = os.getenv('TARGET_GROUP_ID')  # ID –≥—Ä—É–ø–ø—ã –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è

class MemoryOptimizedUserTracker:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é"""
    
    def __init__(self, max_users=1000, cleanup_interval=3600):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º defaultdict –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        self.user_messages: Dict[int, Dict[int, deque]] = defaultdict(lambda: defaultdict(lambda: deque(maxlen=3)))
        self.user_restrictions: Dict[int, Set[int]] = defaultdict(set)
        self.last_activity: Dict[int, Dict[int, float]] = defaultdict(lambda: defaultdict(float))
        
        self.max_users = max_users
        self.cleanup_interval = cleanup_interval
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª–∞
        self.accepted_users: Dict[int, Set[int]] = defaultdict(set)
        
        # –°–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        self._weak_refs = weakref.WeakSet()
    
    def add_message(self, chat_id: int, user_id: int, message_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.last_activity[chat_id][user_id] = current_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (–º–∞–∫—Å–∏–º—É–º 3)
        user_queue = self.user_messages[chat_id][user_id]
        user_queue.append(message_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_queue) > 3:
            return True
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        if current_time - self.last_cleanup > self.cleanup_interval:
            self._cleanup_old_data()
        
        return False
    
    def remove_message(self, chat_id: int, user_id: int, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞"""
        if chat_id in self.user_messages and user_id in self.user_messages[chat_id]:
            user_queue = self.user_messages[chat_id][user_id]
            try:
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                temp_list = list(user_queue)
                if message_id in temp_list:
                    temp_list.remove(message_id)
                    user_queue.clear()
                    user_queue.extend(temp_list)
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–ª–æ <= 3, —Å–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                    if len(user_queue) <= 3 and user_id in self.user_restrictions[chat_id]:
                        self.user_restrictions[chat_id].discard(user_id)
                        return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            except ValueError:
                pass
        return False
    
    def is_restricted(self, chat_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.user_restrictions[chat_id]
    
    def restrict_user(self, chat_id: int, user_id: int):
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_restrictions[chat_id].add(user_id)
    
    def get_message_count(self, chat_id: int, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return len(self.user_messages[chat_id][user_id])
    
    def _cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        current_time = time.time()
        cutoff_time = current_time - (24 * 3600)  # 24 —á–∞—Å–∞
        
        chats_to_remove = []
        for chat_id in list(self.last_activity.keys()):
            users_to_remove = []
            for user_id, last_time in list(self.last_activity[chat_id].items()):
                if last_time < cutoff_time:
                    users_to_remove.append(user_id)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in users_to_remove:
                self.last_activity[chat_id].pop(user_id, None)
                self.user_messages[chat_id].pop(user_id, None)
                self.user_restrictions[chat_id].discard(user_id)
                self.accepted_users[chat_id].discard(user_id)
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Ç—ã
            if not self.last_activity[chat_id]:
                chats_to_remove.append(chat_id)
        
        for chat_id in chats_to_remove:
            self.last_activity.pop(chat_id, None)
            self.user_messages.pop(chat_id, None)
            self.user_restrictions.pop(chat_id, None)
            self.accepted_users.pop(chat_id, None)
        
        self.last_cleanup = current_time
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.last_activity)}")

class TelegramLimitBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, token: str, render_url: str = None, target_group_id: str = None):
        self.token = token
        self.render_url = render_url
        self.target_group_id = int(target_group_id) if target_group_id else None
        self.application = None
        self.tracker = MemoryOptimizedUserTracker()
        self.keep_alive_task = None
        
        # –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.examples = {
            "friends": "–ñ–µ–Ω—â–∏–Ω–∞. –ú–æ—Å–∫–≤–∞. 24.06/04.07 (–∏–ª–∏ \"–ª—é–±–æ–µ –≤—Ä–µ–º—è\")\n\n–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, –∏—â—É –¥—Ä—É–≥–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≥–ª—É–±–æ–∫–∏—Ö —Ç–µ–º –ø–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏.\n",
            "travel": "–ú—É–∂—á–∏–Ω–∞. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥. 15.07/20.07\n\n–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –≥–æ—Ä—ã, –∏—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.\n",
            "business": "–ñ–µ–Ω—â–∏–Ω–∞. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥. –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ñ–µ, –µ—Å—Ç—å –æ–ø—ã—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ.\n"
        }
    
    async def start_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
        user_id = update.effective_user.id
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            with open('1.png', 'rb') as photo:
                await update.message.reply_photo(photo=photo)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton("English", callback_data="lang_en")]
            ])
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=keyboard
            )
            
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton("English", callback_data="lang_en")]
            ])
            
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=keyboard
            )
        
        return LANGUAGE_SELECTION
    
    async def language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "lang_ru":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–∏–∫–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
            await self.update_topics()
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            keyboard = []
            topics = self.tracker.get_topics()
            
            if topics:
                for topic_id, topic_name in topics.items():
                    keyboard.append([InlineKeyboardButton(f"üìÇ {topic_name}", callback_data=f"category_{topic_id}")])
            else:
                # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                keyboard = [
                    [InlineKeyboardButton("üë• –î—Ä—É–∑—å—è –∏ –æ–±—â–µ–Ω–∏–µ", callback_data="category_friends")],
                    [InlineKeyboardButton("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="category_travel")],
                    [InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å", callback_data="category_business")]
                ]
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_lang")])
            
            await query.edit_message_text(
                text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return CATEGORY_SELECTION
            
        elif query.data == "lang_en":
            await query.edit_message_text(
                text="üöß English version is coming soon!\n\n–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_lang")]])
            )
            return LANGUAGE_SELECTION
    
    async def category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_lang":
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton("English", callback_data="lang_en")]
            ])
            
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=keyboard
            )
            return LANGUAGE_SELECTION
        
        if query.data.startswith("category_"):
            category = query.data.replace("category_", "")
            context.user_data['selected_category'] = category
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            example = self.examples.get(category, self.examples["friends"])
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="back_to_categories")]
            ])
            
            await query.edit_message_text(
                text=f"üìù –ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
                     f"{example}\n"
                     f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤:\n"
                     f"‚Ä¢ –ü–æ–ª (–≤–∞—à)\n"
                     f"‚Ä¢ –ì–æ—Ä–æ–¥ (–≥–¥–µ –∏—â–µ—Ç–µ –¥—Ä—É–∑–µ–π)\n"
                     f"‚Ä¢ –î–∞—Ç—É (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∞ —Å/–ø–æ)\n\n"
                     f"–ï—Å–ª–∏ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º - –º—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –≥—Ä—É–ø–ø—É!",
                reply_markup=keyboard
            )
            
            return WRITING_POST
    
    async def process_user_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        posts_count = self.tracker.get_user_posts_count(user_id)
        if posts_count >= 3:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è
            return await self.show_delete_menu(update, context)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if self.validate_post(user_text):
            category = context.user_data.get('selected_category', 'friends')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            message_id = await self.send_to_group(user_text, user_id, category)
            
            if message_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä
                topic_id = self.get_topic_id_by_category(category)
                self.tracker.add_post(user_id, topic_id, message_id)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_another")],
                    [InlineKeyboardButton("üìä –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_posts")]
                ])
                
                await update.message.reply_text(
                    "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!\n\n"
                    f"üìä –í–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {posts_count + 1}/3",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_send")]])
                )
        else:
            await update.message.reply_text(
                "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
                "‚Ä¢ –ü–æ–ª (–≤–∞—à)\n"
                "‚Ä¢ –ì–æ—Ä–æ–¥\n"
                "‚Ä¢ –î–∞—Ç—É –∏–ª–∏ '–ª—é–±–æ–µ –≤—Ä–µ–º—è'\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        
        return WRITING_POST
    
    async def show_delete_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_posts = self.tracker.get_user_posts_by_topic(user_id)
        
        if not user_posts:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_new")]])
            )
            return CATEGORY_SELECTION
        
        keyboard = []
        topics = self.tracker.get_topics()
        
        for topic_id, message_ids in user_posts.items():
            topic_name = topics.get(topic_id, f"–¢–µ–º–∞ {topic_id}")
            posts_count = len(message_ids)
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {topic_name} ({posts_count} –æ–±—ä—è–≤–ª.)", 
                callback_data=f"delete_topic_{topic_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
        
        await update.message.reply_text(
            "üö´ –õ–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.\n"
            "–ö–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return DELETE_SELECTION
    
    def validate_post(self, text: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–∞
        has_gender = any(word in text_lower for word in ['–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞', '–º.', '–∂.'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ)
        has_city = bool(re.search(r'\b[–ê-–Ø–Å][–∞-—è—ë]+', text))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –∏–ª–∏ "–ª—é–±–æ–µ –≤—Ä–µ–º—è"
        has_date = any(word in text_lower for word in ['–ª—é–±–æ–µ –≤—Ä–µ–º—è', '.', '/', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞']) or \
                   bool(re.search(r'\d{1,2}[./]\d{1,2}', text))
        
        return has_gender and has_city and has_date
    
    async def send_to_group(self, text: str, user_id: int, category: str) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
        if not self.target_group_id:
            logger.error("TARGET_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.application.bot.get_chat(user_id)
            if user.username:
                user_link = f"https://t.me/{user.username}"
            else:
                user_link = f"tg://user?id={user_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_text = f"{text}\n\n**[–ù–∞–ø–∏—Å–∞—Ç—å]({user_link})**"
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã
            topic_id = self.get_topic_id_by_category(category)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            message = await self.application.bot.send_message(
                chat_id=self.target_group_id,
                text=full_text,
                parse_mode='Markdown',
                message_thread_id=topic_id if topic_id else None
            )
            
            return message.message_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            return None
    
    def get_topic_id_by_category(self, category: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        topics = self.tracker.get_topics()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if topics:
            for topic_id, topic_name in topics.items():
                if category in topic_name.lower() or any(word in topic_name.lower() for word in category.split('_')):
                    return topic_id
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–ø–∏–∫
            return next(iter(topics.keys()))
        
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç)
        return None
    
    async def update_topics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã"""
        if not self.target_group_id:
            return
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä—É–º–µ (—Ç–µ–º–∞—Ö)
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getForumTopicIconStickers
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ–º—ã
            default_topics = {
                1: "üë• –î—Ä—É–∑—å—è –∏ –æ–±—â–µ–Ω–∏–µ",
                2: "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", 
                3: "üíº –ë–∏–∑–Ω–µ—Å –∏ —Ä–∞–±–æ—Ç–∞"
            }
            
            self.tracker.set_topics(default_topics)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ–º—ã: {default_topics}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ–º—ã
            self.tracker.set_topics({
                1: "üë• –î—Ä—É–∑—å—è –∏ –æ–±—â–µ–Ω–∏–µ",
                2: "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                3: "üíº –ë–∏–∑–Ω–µ—Å –∏ —Ä–∞–±–æ—Ç–∞"
            })
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not update.effective_chat or not update.effective_user:
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if user_id not in self.tracker.accepted_users[chat_id]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
            ]])
            
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "üìã **–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:**\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n"
                "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
                "üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞
            message_count = self.tracker.get_message_count(chat_id, user_id)
            await update.message.reply_text(
                "ü§ñ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
                f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {message_count}/3 –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª–∞:\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n\n"
                "üí° –ö–æ–º–∞–Ω–¥—ã: /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.effective_chat:
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        message_id = update.message.message_id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if update.effective_user.is_bot:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message.text and update.message.text.startswith('/'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª–∞
        if user_id not in self.tracker.accepted_users[chat_id]:
            try:
                await update.message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
                ]])
                
                reminder_msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {update.effective_user.first_name}, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!",
                    reply_markup=keyboard
                )
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(self._delete_message_later(context.bot, chat_id, reminder_msg.message_id, 30))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–ø—Ä–∏–Ω—è–≤—à–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self.tracker.is_restricted(chat_id, user_id):
            try:
                await update.message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    await context.bot.send_message(
                        user_id,
                        "üö´ –õ–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫
                    warning_msg = await context.bot.send_message(
                        chat_id,
                        f"üö´ @{update.effective_user.username or update.effective_user.first_name}, "
                        f"–ª–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.",
                        reply_to_message_id=message_id
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    asyncio.create_task(self._delete_message_later(context.bot, chat_id, warning_msg.message_id, 10))
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–∫–µ—Ä
        if self.tracker.add_message(chat_id, user_id, message_id):
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.tracker.restrict_user(chat_id, user_id)
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç
                await update.message.delete()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
                try:
                    await context.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        permissions=ChatPermissions(
                            can_send_messages=False,
                            can_send_audios=False,
                            can_send_documents=False,
                            can_send_photos=False,
                            can_send_videos=False,
                            can_send_video_notes=False,
                            can_send_voice_notes=False,
                            can_send_polls=False,
                            can_send_other_messages=False,
                            can_add_web_page_previews=False
                        )
                    )
                except TelegramError:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                try:
                    await context.bot.send_message(
                        user_id,
                        "üö´ –õ–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω!\n"
                        "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                except:
                    warning_msg = await context.bot.send_message(
                        chat_id,
                        f"üö´ @{update.effective_user.username or update.effective_user.first_name}, "
                        f"–ª–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω! –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                    asyncio.create_task(self._delete_message_later(context.bot, chat_id, warning_msg.message_id, 15))
                    
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
    
    async def handle_callbacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback-–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "create_another":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self.update_topics()
            
            keyboard = []
            topics = self.tracker.get_topics()
            
            for topic_id, topic_name in topics.items():
                keyboard.append([InlineKeyboardButton(f"üìÇ {topic_name}", callback_data=f"category_{topic_id}")])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_lang")])
            
            await query.edit_message_text(
                text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CATEGORY_SELECTION
            
        elif query.data == "my_posts":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            user_id = update.effective_user.id
            user_posts = self.tracker.get_user_posts_by_topic(user_id)
            total_posts = self.tracker.get_user_posts_count(user_id)
            
            if user_posts:
                stats_text = f"üìä –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({total_posts}/3):\n\n"
                topics = self.tracker.get_topics()
                
                for topic_id, message_ids in user_posts.items():
                    topic_name = topics.get(topic_id, f"–¢–µ–º–∞ {topic_id}")
                    stats_text += f"üìÇ {topic_name}: {len(message_ids)} –æ–±—ä—è–≤–ª.\n"
                
                keyboard = [
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_delete")],
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="create_another")]
                ]
            else:
                stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                keyboard = [[InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_another")]]
            
            await query.edit_message_text(
                text=stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif query.data == "start_delete":
            return await self.show_delete_menu_callback(update, context)
            
        elif query.data.startswith("delete_topic_"):
            return await self.handle_topic_deletion(update, context)
    
    async def show_delete_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        user_id = update.effective_user.id
        user_posts = self.tracker.get_user_posts_by_topic(user_id)
        
        if not user_posts:
            await query.edit_message_text(
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_another")]])
            )
            return CATEGORY_SELECTION
        
        keyboard = []
        topics = self.tracker.get_topics()
        
        for topic_id, message_ids in user_posts.items():
            topic_name = topics.get(topic_id, f"–¢–µ–º–∞ {topic_id}")
            posts_count = len(message_ids)
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {topic_name} ({posts_count} –æ–±—ä—è–≤–ª.)", 
                callback_data=f"delete_topic_{topic_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_posts")])
        
        await query.edit_message_text(
            text="üóëÔ∏è –ö–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return DELETE_SELECTION
    
    async def handle_topic_deletion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""
        query = update.callback_query
        user_id = update.effective_user.id
        topic_id = int(query.data.replace("delete_topic_", ""))
        
        user_posts = self.tracker.get_user_posts_by_topic(user_id)
        
        if topic_id in user_posts:
            message_ids = user_posts[topic_id].copy()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
            deleted_count = 0
            for message_id in message_ids:
                try:
                    await self.application.bot.delete_message(
                        chat_id=self.target_group_id,
                        message_id=message_id
                    )
                    self.tracker.remove_post(user_id, topic_id, message_id)
                    deleted_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            
            topics = self.tracker.get_topics()
            topic_name = topics.get(topic_id, f"–¢–µ–º–∞ {topic_id}")
            
            await query.edit_message_text(
                text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–º—ã '{topic_name}'\n\n"
                     f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_another")],
                    [InlineKeyboardButton("üìä –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_posts")]
                ])
            )
        else:
            await query.edit_message_text(
                text="‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_posts")]])
            )
        
        return CATEGORY_SELECTION
    
    async def cancel_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        if not update.chat_member or not update.effective_chat:
            return
            
        new_member = update.chat_member.new_chat_member
        chat_id = update.effective_chat.id
        user_id = new_member.user.id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        if new_member.user.is_bot:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        if (update.chat_member.old_chat_member.status in ['left', 'kicked'] and 
            new_member.status in ['member', 'restricted']):
            
            try:
                # –°—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_audios=False,
                        can_send_documents=False,
                        can_send_photos=False,
                        can_send_videos=False,
                        can_send_video_notes=False,
                        can_send_voice_notes=False,
                        can_send_polls=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False
                    )
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
                ]])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
                rules_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.user.first_name}!\n\n"
                    f"üìã **–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:**\n"
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                    f"‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n"
                    f"‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n"
                    f"‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
                    f"üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                )
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=rules_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    async def handle_accept_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª"""
        if not update.callback_query:
            return
            
        query = update.callback_query
        chat_id = update.effective_chat.id
        
        # –ü–∞—Ä—Å–∏–º callback_data
        if not query.data.startswith("accept_rules_"):
            return
            
        target_user_id = int(query.data.split("_")[-1])
        current_user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if current_user_id != target_user_id:
            await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
            return
        
        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target_user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_audios=True,
                    can_send_documents=True,
                    can_send_photos=True,
                    can_send_videos=True,
                    can_send_video_notes=True,
                    can_send_voice_notes=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª–∞
            self.tracker.accepted_users[chat_id].add(target_user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã!\n\n"
                     f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {update.effective_user.first_name}!\n"
                     f"üìä –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Ä–∞–∑—É–º–Ω–æ.\n\n"
                     f"üí° –ö–æ–º–∞–Ω–¥—ã:\n"
                     f"/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                parse_mode='Markdown'
            )
            
            await query.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
    
    async def _delete_message_later(self, bot, chat_id: int, message_id: int, delay: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(delay)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except TelegramError:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update.effective_chat or not update.effective_user:
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª–∞
        if user_id not in self.tracker.accepted_users[chat_id]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
            ]])
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!",
                reply_markup=keyboard
            )
            return
        
        message_count = self.tracker.get_message_count(chat_id, user_id)
        is_restricted = self.tracker.is_restricted(chat_id, user_id)
        
        status_text = f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
        status_text += f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {message_count}/3\n"
        status_text += f"üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω: {'–î–∞' if is_restricted else '–ù–µ—Ç'}\n"
        status_text += f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã: –î–∞\n"
        
        if message_count >= 3:
            status_text += "\n‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö."
        elif is_restricted:
            status_text += "\nüîí –í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
        else:
            remaining = 3 - message_count
            status_text += f"\n‚ú® –û—Å—Ç–∞–ª–æ—Å—å {remaining} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        
        await update.message.reply_text(status_text)
    
    async def keep_alive(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º, –¥–µ–ª–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        while True:
            try:
                if self.render_url:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(self.render_url, timeout=30) as response:
                            logger.info(f"Keep-alive ping: {response.status}")
                
                # –¢–∞–∫–∂–µ –ø–∏–Ω–≥—É–µ–º Telegram API
                if self.application and self.application.bot:
                    await self.application.bot.get_me()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
            
            # –ñ–¥–µ–º 25 –º–∏–Ω—É—Ç (Render –∑–∞—Å—ã–ø–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
            await asyncio.sleep(25 * 60)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
                )
            except:
                pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (keep-alive + webhook endpoint)
async def create_web_server(bot_application):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å webhook endpoint"""
    
    async def health_check(request):
        return web.Response(text="Bot is alive!", status=200)
    
    async def webhook_handler(request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = await request.json()
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            update = Update.de_json(json_data, bot_application.bot)
            if update:
                await bot_application.process_update(update)
            
            return web.Response(status=200)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
            return web.Response(status=500)
    
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_post('/webhook', webhook_handler)  # Webhook endpoint
    
    return app

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    RENDER_URL = os.getenv('RENDER_URL', 'https://your-app.onrender.com')
    TARGET_GROUP_ID = os.getenv('TARGET_GROUP_ID')  # ID –≥—Ä—É–ø–ø—ã –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    PORT = int(os.getenv('PORT', 8000))
    
    if not TOKEN:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if not TARGET_GROUP_ID:
        logger.warning("‚ö†Ô∏è TARGET_GROUP_ID –Ω–µ —É–∫–∞–∑–∞–Ω - –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = TelegramLimitBot(TOKEN, RENDER_URL, TARGET_GROUP_ID)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot.application = Application.builder().token(TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
        conversation_handler = ConversationHandler(
            entry_points=[CommandHandler("start", bot.start_conversation)],
            states={
                LANGUAGE_SELECTION: [CallbackQueryHandler(bot.language_selection)],
                CATEGORY_SELECTION: [CallbackQueryHandler(bot.category_selection)],
                WRITING_POST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_user_post),
                    CallbackQueryHandler(bot.category_selection, pattern="back_to_categories")
                ],
                DELETE_SELECTION: [CallbackQueryHandler(bot.handle_topic_deletion)]
            },
            fallbacks=[
                CommandHandler("cancel", bot.cancel_conversation),
                CallbackQueryHandler(bot.handle_callbacks, pattern="^(create_another|my_posts|start_delete|back_to_lang)$")
            ],
            per_user=True,
            per_chat=False,
            per_message=True  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º warning
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot.application.add_handler(conversation_handler)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤
        bot.application.add_handler(CallbackQueryHandler(bot.handle_callbacks))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.application.add_error_handler(bot.error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await bot.application.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å webhook
        web_app = await create_web_server(bot.application)
        runner = web.AppRunner(web_app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL
        webhook_url = f"{RENDER_URL}/webhook"
        await bot.application.bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=['message', 'edited_message', 'callback_query', 'chat_member']
        )
        
        logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
        bot.keep_alive_task = asyncio.create_task(bot.keep_alive())
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å webhook!")
        logger.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook...")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º —á–∞—Å, –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        try:
            # –£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if bot.application:
                await bot.application.bot.delete_webhook()
                await bot.application.shutdown()
        except:
            pass
        
        if bot.keep_alive_task:
            bot.keep_alive_task.cancel()
        
        try:
            await runner.cleanup()
        except:
            pass

if __name__ == '__main__':
    asyncio.run(main())
