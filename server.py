import asyncio
import logging
import os
import time
import threading
from collections import defaultdict, deque
from datetime import datetime, timedelta
from typing import Dict, Set
import aiohttp
from aiohttp import web
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ChatMemberHandler,
    filters, 
    ContextTypes,
    CallbackContext
)
from telegram.error import TelegramError
import gc
import weakref

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MemoryOptimizedUserTracker:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é"""
    
    def __init__(self, max_users=1000, cleanup_interval=3600):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º defaultdict –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        self.user_messages: Dict[int, Dict[int, deque]] = defaultdict(lambda: defaultdict(lambda: deque(maxlen=3)))
        self.user_restrictions: Dict[int, Set[int]] = defaultdict(set)
        self.last_activity: Dict[int, Dict[int, float]] = defaultdict(lambda: defaultdict(float))
        
        self.max_users = max_users
        self.cleanup_interval = cleanup_interval
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª–∞
        self.accepted_users: Dict[int, Set[int]] = defaultdict(set)
        
        # –°–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        self._weak_refs = weakref.WeakSet()
    
    def add_message(self, chat_id: int, user_id: int, message_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.last_activity[chat_id][user_id] = current_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (–º–∞–∫—Å–∏–º—É–º 3)
        user_queue = self.user_messages[chat_id][user_id]
        user_queue.append(message_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_queue) > 3:
            return True
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        if current_time - self.last_cleanup > self.cleanup_interval:
            self._cleanup_old_data()
        
        return False
    
    def remove_message(self, chat_id: int, user_id: int, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞"""
        if chat_id in self.user_messages and user_id in self.user_messages[chat_id]:
            user_queue = self.user_messages[chat_id][user_id]
            try:
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                temp_list = list(user_queue)
                if message_id in temp_list:
                    temp_list.remove(message_id)
                    user_queue.clear()
                    user_queue.extend(temp_list)
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–ª–æ <= 3, —Å–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                    if len(user_queue) <= 3 and user_id in self.user_restrictions[chat_id]:
                        self.user_restrictions[chat_id].discard(user_id)
                        return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            except ValueError:
                pass
        return False
    
    def is_restricted(self, chat_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.user_restrictions[chat_id]
    
    def restrict_user(self, chat_id: int, user_id: int):
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_restrictions[chat_id].add(user_id)
    
    def get_message_count(self, chat_id: int, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return len(self.user_messages[chat_id][user_id])
    
    def _cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        current_time = time.time()
        cutoff_time = current_time - (24 * 3600)  # 24 —á–∞—Å–∞
        
        chats_to_remove = []
        for chat_id in list(self.last_activity.keys()):
            users_to_remove = []
            for user_id, last_time in list(self.last_activity[chat_id].items()):
                if last_time < cutoff_time:
                    users_to_remove.append(user_id)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in users_to_remove:
                self.last_activity[chat_id].pop(user_id, None)
                self.user_messages[chat_id].pop(user_id, None)
                self.user_restrictions[chat_id].discard(user_id)
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Ç—ã
            if not self.last_activity[chat_id]:
                chats_to_remove.append(chat_id)
        
        for chat_id in chats_to_remove:
            self.last_activity.pop(chat_id, None)
            self.user_messages.pop(chat_id, None)
            self.user_restrictions.pop(chat_id, None)
        
        self.last_cleanup = current_time
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.last_activity)}")

class TelegramLimitBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    
    def __init__(self, token: str, render_url: str = None):
        self.token = token
        self.render_url = render_url
        self.application = None
        self.tracker = MemoryOptimizedUserTracker()
        self.keep_alive_task = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not update.effective_chat or not update.effective_user:
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if user_id not in self.tracker.accepted_users[chat_id]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
            ]])
            
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "üìã **–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:**\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n"
                "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
                "üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞
            message_count = self.tracker.get_message_count(chat_id, user_id)
            await update.message.reply_text(
                "ü§ñ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
                f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {message_count}/3 –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª–∞:\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n\n"
                "üí° –ö–æ–º–∞–Ω–¥—ã: /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.effective_chat:
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        message_id = update.message.message_id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if update.effective_user.is_bot:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message.text and update.message.text.startswith('/'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª–∞
        if user_id not in self.tracker.accepted_users[chat_id]:
            try:
                await update.message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
                ]])
                
                reminder_msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {update.effective_user.first_name}, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!",
                    reply_markup=keyboard
                )
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(self._delete_message_later(context.bot, chat_id, reminder_msg.message_id, 30))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–ø—Ä–∏–Ω—è–≤—à–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self.tracker.is_restricted(chat_id, user_id):
            try:
                await update.message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    await context.bot.send_message(
                        user_id,
                        "üö´ –õ–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫
                    warning_msg = await context.bot.send_message(
                        chat_id,
                        f"üö´ @{update.effective_user.username or update.effective_user.first_name}, "
                        f"–ª–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.",
                        reply_to_message_id=message_id
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    asyncio.create_task(self._delete_message_later(context.bot, chat_id, warning_msg.message_id, 10))
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–∫–µ—Ä
        if self.tracker.add_message(chat_id, user_id, message_id):
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.tracker.restrict_user(chat_id, user_id)
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç
                await update.message.delete()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
                try:
                    await context.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        permissions=ChatPermissions(
                            can_send_messages=False,
                            can_send_audios=False,
                            can_send_documents=False,
                            can_send_photos=False,
                            can_send_videos=False,
                            can_send_video_notes=False,
                            can_send_voice_notes=False,
                            can_send_polls=False,
                            can_send_other_messages=False,
                            can_add_web_page_previews=False
                        )
                    )
                except TelegramError:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                try:
                    await context.bot.send_message(
                        user_id,
                        "üö´ –õ–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω!\n"
                        "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                except:
                    warning_msg = await context.bot.send_message(
                        chat_id,
                        f"üö´ @{update.effective_user.username or update.effective_user.first_name}, "
                        f"–ª–∏–º–∏—Ç 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω! –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
                    )
                    asyncio.create_task(self._delete_message_later(context.bot, chat_id, warning_msg.message_id, 15))
                    
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
    
    async def handle_new_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        if not update.chat_member or not update.effective_chat:
            return
            
        new_member = update.chat_member.new_chat_member
        chat_id = update.effective_chat.id
        user_id = new_member.user.id
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        if new_member.user.is_bot:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        if (update.chat_member.old_chat_member.status in ['left', 'kicked'] and 
            new_member.status in ['member', 'restricted']):
            
            try:
                # –°—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_audios=False,
                        can_send_documents=False,
                        can_send_photos=False,
                        can_send_videos=False,
                        can_send_video_notes=False,
                        can_send_voice_notes=False,
                        can_send_polls=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False
                    )
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
                ]])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
                rules_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.user.first_name}!\n\n"
                    f"üìã **–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:**\n"
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
                    f"‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n"
                    f"‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n"
                    f"‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
                    f"üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                )
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=rules_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    async def handle_accept_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª"""
        if not update.callback_query:
            return
            
        query = update.callback_query
        chat_id = update.effective_chat.id
        
        # –ü–∞—Ä—Å–∏–º callback_data
        if not query.data.startswith("accept_rules_"):
            return
            
        target_user_id = int(query.data.split("_")[-1])
        current_user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if current_user_id != target_user_id:
            await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
            return
        
        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target_user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_audios=True,
                    can_send_documents=True,
                    can_send_photos=True,
                    can_send_videos=True,
                    can_send_video_notes=True,
                    can_send_voice_notes=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª–∞
            self.tracker.accepted_users[chat_id].add(target_user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã!\n\n"
                     f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {update.effective_user.first_name}!\n"
                     f"üìä –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Ä–∞–∑—É–º–Ω–æ.\n\n"
                     f"üí° –ö–æ–º–∞–Ω–¥—ã:\n"
                     f"/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                parse_mode='Markdown'
            )
            
            await query.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
    
    async def _delete_message_later(self, bot, chat_id: int, message_id: int, delay: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(delay)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except TelegramError:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update.effective_chat or not update.effective_user:
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª–∞
        if user_id not in self.tracker.accepted_users[chat_id]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data=f"accept_rules_{user_id}")
            ]])
            
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!",
                reply_markup=keyboard
            )
            return
        
        message_count = self.tracker.get_message_count(chat_id, user_id)
        is_restricted = self.tracker.is_restricted(chat_id, user_id)
        
        status_text = f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
        status_text += f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {message_count}/3\n"
        status_text += f"üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω: {'–î–∞' if is_restricted else '–ù–µ—Ç'}\n"
        status_text += f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã: –î–∞\n"
        
        if message_count >= 3:
            status_text += "\n‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö."
        elif is_restricted:
            status_text += "\nüîí –í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
        else:
            remaining = 3 - message_count
            status_text += f"\n‚ú® –û—Å—Ç–∞–ª–æ—Å—å {remaining} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        
        await update.message.reply_text(status_text)
    
    async def keep_alive(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º, –¥–µ–ª–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        while True:
            try:
                if self.render_url:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(self.render_url, timeout=30) as response:
                            logger.info(f"Keep-alive ping: {response.status}")
                
                # –¢–∞–∫–∂–µ –ø–∏–Ω–≥—É–µ–º Telegram API
                if self.application and self.application.bot:
                    await self.application.bot.get_me()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
            
            # –ñ–¥–µ–º 25 –º–∏–Ω—É—Ç (Render –∑–∞—Å—ã–ø–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
            await asyncio.sleep(25 * 60)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
                )
            except:
                pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (keep-alive + webhook endpoint)
async def create_web_server(bot_application):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å webhook endpoint"""
    
    async def health_check(request):
        return web.Response(text="Bot is alive!", status=200)
    
    async def webhook_handler(request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = await request.json()
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            update = Update.de_json(json_data, bot_application.bot)
            if update:
                await bot_application.process_update(update)
            
            return web.Response(status=200)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
            return web.Response(status=500)
    
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_post('/webhook', webhook_handler)  # Webhook endpoint
    
    return app

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    RENDER_URL = os.getenv('RENDER_URL', 'https://your-app.onrender.com')
    PORT = int(os.getenv('PORT', 8000))
    
    if not TOKEN:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = TelegramLimitBot(TOKEN, RENDER_URL)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot.application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot.application.add_handler(CommandHandler("start", bot.start_command))
        bot.application.add_handler(CommandHandler("status", bot.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        bot.application.add_handler(ChatMemberHandler(bot.handle_new_member, ChatMemberHandler.CHAT_MEMBER))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        bot.application.add_handler(CallbackQueryHandler(bot.handle_accept_rules, pattern="accept_rules_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message)
        )
        bot.application.add_handler(
            MessageHandler(
                filters.PHOTO | filters.VIDEO | filters.Document.ALL | 
                filters.AUDIO | filters.VOICE | filters.VIDEO_NOTE | filters.Sticker.ALL, 
                bot.handle_message
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.application.add_error_handler(bot.error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await bot.application.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å webhook
        web_app = await create_web_server(bot.application)
        runner = web.AppRunner(web_app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL
        webhook_url = f"{RENDER_URL}/webhook"
        await bot.application.bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=['message', 'edited_message', 'channel_post', 'edited_channel_post', 'chat_member', 'callback_query']
        )
        
        logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
        bot.keep_alive_task = asyncio.create_task(bot.keep_alive())
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å webhook!")
        logger.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook...")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º —á–∞—Å, –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        try:
            # –£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if bot.application:
                await bot.application.bot.delete_webhook()
                await bot.application.shutdown()
        except:
            pass
        
        if bot.keep_alive_task:
            bot.keep_alive_task.cancel()
        
        try:
            await runner.cleanup()
        except:
            pass

if __name__ == '__main__':
    asyncio.run(main())
