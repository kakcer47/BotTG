const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID;
const DATABASE_URL = process.env.DATABASE_URL;

console.log('=== –ú–û–î–ï–†–ê–¢–û–† –ë–û–¢ ===');
console.log('BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('GROUP_ID:', GROUP_ID);
console.log('DATABASE_URL:', DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

if (!BOT_TOKEN || !GROUP_ID || !DATABASE_URL) {
    console.error('‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async function initDB() {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                count INTEGER DEFAULT 0,
                restricted BOOLEAN DEFAULT FALSE
            )
        `);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUser(userId) {
    const result = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
    return result.rows[0];
}

// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(userId) {
    await pool.query('INSERT INTO users (id, count) VALUES ($1, 1)', [userId]);
    return { id: userId, count: 1, restricted: false };
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
async function updateCount(userId, change) {
    const result = await pool.query(
        'UPDATE users SET count = count + $1 WHERE id = $2 RETURNING *',
        [change, userId]
    );
    return result.rows[0];
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
async function setRestricted(userId, restricted) {
    await pool.query('UPDATE users SET restricted = $1 WHERE id = $2', [restricted, userId]);
}

// –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function restrictUser(userId) {
    try {
        await bot.restrictChatMember(GROUP_ID, userId, {
            can_send_messages: false
        });
        console.log(`[RESTRICT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω`);
        return true;
    } catch (error) {
        console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å ${userId}:`, error.message);
        return false;
    }
}

// –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
async function unrestrictUser(userId) {
    try {
        await bot.restrictChatMember(GROUP_ID, userId, {
            can_send_messages: true,
            can_send_media_messages: true,
            can_send_polls: true,
            can_send_other_messages: true
        });
        console.log(`[UNRESTRICT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        return true;
    } catch (error) {
        console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ${userId}:`, error.message);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã, –Ω–µ –æ—Ç –±–æ—Ç–æ–≤, –Ω–µ –∫–æ–º–∞–Ω–¥—ã
    if (msg.chat.id.toString() !== GROUP_ID || msg.from.is_bot || msg.text?.startsWith('/')) {
        return;
    }
    
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'User';
    
    try {
        let user = await getUser(userId);
        
        if (!user) {
            // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            user = await createUser(userId);
            console.log(`[NEW] ${userName} (${userId}): 1/3`);
        } else {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            user = await updateCount(userId, 1);
            console.log(`[COUNT] ${userName} (${userId}): ${user.count}/3`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (user.count >= 3 && !user.restricted) {
            const success = await restrictUser(userId);
            if (success) {
                await setRestricted(userId, true);
                console.log(`[ACTION] ${userName} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (${user.count}/3)`);
            }
        }
        
    } catch (error) {
        console.error('[DB ERROR]', error.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('channel_post', async () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ
    // –ü–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
setInterval(async () => {
    try {
        const result = await pool.query('SELECT * FROM users WHERE restricted = true');
        
        for (const user of result.rows) {
            if (user.count < 3) {
                const success = await unrestrictUser(user.id);
                if (success) {
                    await setRestricted(user.id, false);
                    console.log(`[AUTO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (${user.count}/3)`);
                }
            }
        }
    } catch (error) {
        console.error('[CHECK ERROR]', error.message);
    }
}, 2 * 60 * 1000);

// –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.onText(/\/reduce (\d+)/, async (msg, match) => {
    if (msg.chat.id.toString() !== GROUP_ID) return;
    
    const userId = parseInt(match[1]);
    
    try {
        const user = await updateCount(userId, -1);
        if (user && user.count < 3 && user.restricted) {
            const success = await unrestrictUser(userId);
            if (success) {
                await setRestricted(userId, false);
                console.log(`[MANUAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await bot.deleteMessage(GROUP_ID, msg.message_id);
    } catch (error) {
        console.error('[REDUCE ERROR]', error.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('[BOT ERROR]', error.message);
});

bot.on('polling_error', (error) => {
    console.error('[POLLING ERROR]', error.message);
});

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const http = require('http');
const PORT = process.env.PORT || 3000;

const server = http.createServer(async (req, res) => {
    if (req.url === '/') {
        try {
            const stats = await pool.query(`
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN restricted = true THEN 1 END) as restricted,
                    AVG(count) as avg_count
                FROM users
            `);
            
            const recent = await pool.query('SELECT * FROM users ORDER BY id DESC LIMIT 10');
            
            const { total, restricted, avg_count } = stats.rows[0];
            
            res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
                <h1>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ë–æ—Ç</h1>
                <p>‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                <p>üÜî Group ID: ${GROUP_ID}</p>
                <p>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total || 0}</p>
                <p>üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö: ${restricted || 0}</p>
                <p>üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${Math.round(avg_count || 0)}</p>
                
                <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h2>
                <ul>
                ${recent.rows.map(u => 
                    `<li>ID: ${u.id}, –°–æ–æ–±—â–µ–Ω–∏–π: ${u.count}, –û–≥—Ä–∞–Ω–∏—á–µ–Ω: ${u.restricted ? '–î–∞' : '–ù–µ—Ç'}</li>`
                ).join('')}
                </ul>
                
                <h2>–õ–æ–≥–∏–∫–∞:</h2>
                <p>3+ —Å–æ–æ–±—â–µ–Ω–∏–π = –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É<br>
                &lt;3 —Å–æ–æ–±—â–µ–Ω–∏–π = —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É</p>
            `);
        } catch (error) {
            res.writeHead(500);
            res.end(`–û—à–∏–±–∫–∞ –ë–î: ${error.message}`);
        }
    } else {
        res.writeHead(404);
        res.end('Not Found');
    }
});

// –ó–∞–ø—É—Å–∫
async function start() {
    await initDB();
    server.listen(PORT, () => {
        console.log(`üöÄ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log('=== –ú–û–î–ï–†–ê–¢–û–† –ì–û–¢–û–í ===');
    });
}

start();
