const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // https://your-app.onrender.com

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ polling (–∏—Å–ø–æ–ª—å–∑—É–µ–º webhook)
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∂–∞–ª–æ–±
const userSettings = new Map();
const messageComplaints = new Map(); // messageId -> Set(userIds)

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã)
const TOPICS = {
    '27': '–¢–µ–º–∞ 1',  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    '28': '–¢–µ–º–∞ 2',  // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ —Å—Å—ã–ª–æ–∫ —Ç–µ–º
    '29': '–¢–µ–º–∞ 3',
    '30': '–¢–µ–º–∞ 4'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
app.use(express.json());

if (WEBHOOK_URL) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`);
    
    app.post(`/bot${BOT_TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
    
    console.log('Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', `${WEBHOOK_URL}/bot${BOT_TOKEN}`);
} else {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.startPolling();
    console.log('–ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è Render
app.get('/', (req, res) => {
    res.send('Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    const keyboard = {
        inline_keyboard: Object.entries(TOPICS).map(([id, name]) => [{
            text: name,
            callback_data: `topic_${id}`
        }])
    };
    
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', { reply_markup: keyboard });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat ID
bot.onText(/\/id/, async (msg) => {
    await bot.sendMessage(msg.chat.id, `Chat ID: ${msg.chat.id}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º
bot.onText(/\/setup (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const topicsInput = match[1];
    
    try {
        const topics = {};
        topicsInput.split(',').forEach(item => {
            const [id, name] = item.split(':');
            if (id && name) {
                topics[id.trim()] = name.trim();
            }
        });
        
        if (Object.keys(topics).length > 0) {
            Object.assign(TOPICS, topics);
            await bot.sendMessage(chatId, `–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–µ–º—ã:\n${Object.entries(topics).map(([id, name]) => `${id}: ${name}`).join('\n')}`);
        } else {
            await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setup ID:–ù–∞–∑–≤–∞–Ω–∏–µ,ID:–ù–∞–∑–≤–∞–Ω–∏–µ');
        }
    } catch (error) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º');
    }
});

// –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
bot.onText(/\/complain/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID || !msg.reply_to_message) return;
    
    const originalMessageId = msg.reply_to_message.message_id;
    const userId = msg.from.id;
    
    if (!messageComplaints.has(originalMessageId)) {
        messageComplaints.set(originalMessageId, new Set());
    }
    
    const complaints = messageComplaints.get(originalMessageId);
    
    if (complaints.has(userId)) {
        await bot.sendMessage(GROUP_ID, '–í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
            reply_to_message_id: msg.message_id
        });
        return;
    }
    
    complaints.add(userId);
    
    if (complaints.size >= 5) {
        try {
            await bot.deleteMessage(GROUP_ID, originalMessageId);
            await bot.sendMessage(GROUP_ID, `–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ –∂–∞–ª–æ–±–∞–º (${complaints.size} –∂–∞–ª–æ–±)`, {
                reply_to_message_id: msg.message_id
            });
            messageComplaints.delete(originalMessageId);
        } catch (error) {
            await bot.sendMessage(GROUP_ID, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', {
                reply_to_message_id: msg.message_id
            });
        }
    } else {
        await bot.sendMessage(GROUP_ID, `–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ (${complaints.size}/5)`, {
            reply_to_message_id: msg.message_id
        });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∂–∞–ª–æ–±—ã
    try {
        await bot.deleteMessage(GROUP_ID, msg.message_id);
    } catch (error) {}
});

bot.onText(/\/share/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID || !msg.reply_to_message) return;
    
    const originalMessageId = msg.reply_to_message.message_id;
    const groupIdNum = GROUP_ID.replace('-100', '');
    const messageLink = `https://t.me/c/${groupIdNum}/${originalMessageId}`;
    
    try {
        await bot.sendMessage(msg.from.id, `–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${messageLink}`);
        await bot.sendMessage(GROUP_ID, '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
            reply_to_message_id: msg.message_id
        });
    } catch (error) {
        await bot.sendMessage(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É: @' + (await bot.getMe()).username, {
            reply_to_message_id: msg.message_id
        });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try {
        await bot.deleteMessage(GROUP_ID, msg.message_id);
    } catch (error) {}
});

bot.onText(/\/author/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID || !msg.reply_to_message) return;
    
    const authorId = msg.reply_to_message.from.id;
    const authorName = msg.reply_to_message.from.first_name;
    
    try {
        await bot.sendMessage(msg.from.id, `–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É: @${authorName}\ntg://user?id=${authorId}`);
        await bot.sendMessage(GROUP_ID, '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
            reply_to_message_id: msg.message_id
        });
    } catch (error) {
        await bot.sendMessage(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É: @' + (await bot.getMe()).username, {
            reply_to_message_id: msg.message_id
        });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try {
        await bot.deleteMessage(GROUP_ID, msg.message_id);
    } catch (error) {}
});

// –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏
bot.onText(/\/help_moderation/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID) return;
    
    const helpText = `üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è):

/complain - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è (–ø—Ä–∏ 5 –∂–∞–ª–æ–±–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è)
/share - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
/author - –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`;
    
    await bot.sendMessage(GROUP_ID, helpText, {
        reply_to_message_id: msg.message_id
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    if (data.startsWith('topic_')) {
        const topicId = data.replace('topic_', '');
        const topicName = TOPICS[topicId];
        
        userSettings.set(chatId, { topicId, topicName });
        
        await bot.editMessageText(`–¢–µ–º–∞: ${topicName}\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É.`, {
            chat_id: chatId,
            message_id: query.message.message_id
        });
        
        await bot.answerCallbackQuery(query.id);
    }
});

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if (msg.text?.startsWith('/') || msg.chat.id.toString() === GROUP_ID) return;
    
    const chatId = msg.chat.id;
    const userConfig = userSettings.get(chatId);
    
    if (!userConfig) {
        await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        return;
    }
    
    try {
        const messageOptions = {
            message_thread_id: parseInt(userConfig.topicId)
        };
        
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (msg.text) {
            await bot.sendMessage(GROUP_ID, msg.text, messageOptions);
        } else if (msg.photo) {
            await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.document) {
            await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.video) {
            await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.voice) {
            await bot.sendVoice(GROUP_ID, msg.voice.file_id, messageOptions);
        } else if (msg.sticker) {
            await bot.sendSticker(GROUP_ID, msg.sticker.file_id, messageOptions);
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.sendMessage(chatId, '‚úì', { 
            reply_to_message_id: msg.message_id 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', error);
        
        let errorMsg = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
        if (error.message.includes('message thread not found')) {
            errorMsg = `–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`;
        } else if (error.message.includes('chat not found')) {
            errorMsg = '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GROUP_ID';
        }
        
        await bot.sendMessage(chatId, errorMsg);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('Unhandled rejection:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
