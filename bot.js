const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // https://your-app.onrender.com

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ polling (–∏—Å–ø–æ–ª—å–∑—É–µ–º webhook)
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∂–∞–ª–æ–±
const userSettings = new Map();
const messageComplaints = new Map(); // messageId -> Set(userIds)
const groupSettings = new Map(); // chatId -> { authorLinksEnabled: true/false }
const messageCache = new Map(); // messageId -> { author, content, timestamp }

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã)
const TOPICS = {
    '27': '–¢–µ–º–∞ 1',  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    '28': '–¢–µ–º–∞ 2',  // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ —Å—Å—ã–ª–æ–∫ —Ç–µ–º
    '29': '–¢–µ–º–∞ 3',
    '30': '–¢–µ–º–∞ 4'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
app.use(express.json());

if (WEBHOOK_URL) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`);
    
    app.post(`/bot${BOT_TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
    
    console.log('Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', `${WEBHOOK_URL}/bot${BOT_TOKEN}`);
} else {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.startPolling();
    console.log('–ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è Render
app.get('/', (req, res) => {
    res.send('Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    const keyboard = {
        inline_keyboard: Object.entries(TOPICS).map(([id, name]) => [{
            text: name,
            callback_data: `topic_${id}`
        }])
    };
    
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', { reply_markup: keyboard });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat ID
bot.onText(/\/id/, async (msg) => {
    await bot.sendMessage(msg.chat.id, `Chat ID: ${msg.chat.id}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º
bot.onText(/\/setup (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const topicsInput = match[1];
    
    try {
        const topics = {};
        topicsInput.split(',').forEach(item => {
            const [id, name] = item.split(':');
            if (id && name) {
                topics[id.trim()] = name.trim();
            }
        });
        
        if (Object.keys(topics).length > 0) {
            Object.assign(TOPICS, topics);
            await bot.sendMessage(chatId, `–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–µ–º—ã:\n${Object.entries(topics).map(([id, name]) => `${id}: ${name}`).join('\n')}`);
        } else {
            await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setup ID:–ù–∞–∑–≤–∞–Ω–∏–µ,ID:–ù–∞–∑–≤–∞–Ω–∏–µ');
        }
    } catch (error) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
bot.onText(/\/buttons (on|off)/, async (msg, match) => {
    if (msg.chat.id.toString() !== GROUP_ID) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try {
        const member = await bot.getChatMember(msg.chat.id, msg.from.id);
        if (!['creator', 'administrator'].includes(member.status)) {
            await bot.sendMessage(msg.chat.id, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—å—é', {
                reply_to_message_id: msg.message_id
            });
            return;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
        return;
    }
    
    const action = match[1];
    const settings = groupSettings.get(msg.chat.id) || {};
    settings.buttonsEnabled = (action === 'on');
    groupSettings.set(msg.chat.id, settings);
    
    await bot.sendMessage(msg.chat.id, `–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${action === 'on' ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`, {
        reply_to_message_id: msg.message_id
    });
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try {
        await bot.deleteMessage(msg.chat.id, msg.message_id);
    } catch (error) {}
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–Ω–µ–ª–∏
bot.onText(/\/buttons_status/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID) return;
    
    const settings = groupSettings.get(msg.chat.id) || { buttonsEnabled: true };
    const status = settings.buttonsEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå';
    
    await bot.sendMessage(GROUP_ID, `–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${status}`, {
        reply_to_message_id: msg.message_id
    });
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
        try {
            await bot.deleteMessage(msg.chat.id, msg.message_id);
        } catch (error) {}
    }, 3000);
});

// –ü–æ–º–æ—â—å –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
bot.onText(/\/help_buttons/, async (msg) => {
    if (msg.chat.id.toString() !== GROUP_ID) return;
    
    const helpText = `üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:

–ü–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏:
‚Ä¢ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è - –ø—Ä–∏ 5 –∂–∞–ª–æ–±–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è - —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ—Ä–∞ –≤ –ª–∏—á–∫—É

üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):
/buttons on - –í–∫–ª—é—á–∏—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/buttons off - –í—ã–∫–ª—é—á–∏—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/buttons_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏

–í—Å–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.`;
    
    await bot.sendMessage(GROUP_ID, helpText, {
        reply_to_message_id: msg.message_id
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const userId = query.from.id;
    const messageId = query.message.message_id;
    
    if (data.startsWith('topic_')) {
        const topicId = data.replace('topic_', '');
        const topicName = TOPICS[topicId];
        
        userSettings.set(chatId, { topicId, topicName });
        
        await bot.editMessageText(`–¢–µ–º–∞: ${topicName}\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É.`, {
            chat_id: chatId,
            message_id: messageId
        });
        
        await bot.answerCallbackQuery(query.id);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    else if (data.startsWith('complain_')) {
        const botMessageId = data.replace('complain_', '');
        const cachedMessage = messageCache.get(botMessageId);
        
        if (!cachedMessage) {
            await bot.answerCallbackQuery(query.id, { text: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ' });
            return;
        }
        
        if (!messageComplaints.has(botMessageId)) {
            messageComplaints.set(botMessageId, new Set());
        }
        
        const complaints = messageComplaints.get(botMessageId);
        
        if (complaints.has(userId)) {
            await bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
            return;
        }
        
        complaints.add(userId);
        
        if (complaints.size >= 5) {
            try {
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                await bot.deleteMessage(GROUP_ID, botMessageId);
                messageComplaints.delete(botMessageId);
                messageCache.delete(botMessageId);
                await bot.answerCallbackQuery(query.id, { text: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ –∂–∞–ª–æ–±–∞–º' });
            } catch (error) {
                await bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
            }
        } else {
            await bot.answerCallbackQuery(query.id, { text: `–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ (${complaints.size}/5)` });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
            const keyboard = {
                inline_keyboard: [[
                    { text: `–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è (${complaints.size}/5)`, callback_data: `complain_${botMessageId}` },
                    { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${botMessageId}` }
                ], [
                    { text: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å', callback_data: `forward_${botMessageId}` },
                    { text: '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', callback_data: `write_${botMessageId}` }
                ]]
            };
            
            try {
                await bot.editMessageReplyMarkup(keyboard, {
                    chat_id: chatId,
                    message_id: messageId
                });
            } catch (error) {}
        }
    }
    
    else if (data.startsWith('delete_')) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
            await bot.deleteMessage(chatId, messageId);
            await bot.answerCallbackQuery(query.id, { text: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ –¥–ª—è –≤–∞—Å' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
        }
    }
    
    else if (data.startsWith('forward_')) {
        const botMessageId = data.replace('forward_', '');
        const cachedMessage = messageCache.get(botMessageId);
        
        if (!cachedMessage || !cachedMessage.originalMessageId) {
            await bot.answerCallbackQuery(query.id, { text: '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
            return;
        }
        
        const groupIdNum = GROUP_ID.replace('-100', '');
        const messageLink = `https://t.me/c/${groupIdNum}/${cachedMessage.originalMessageId}`;
        
        try {
            await bot.sendMessage(userId, `–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${messageLink}`);
            await bot.answerCallbackQuery(query.id, { text: '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
        }
    }
    
    else if (data.startsWith('write_')) {
        const botMessageId = data.replace('write_', '');
        const cachedMessage = messageCache.get(botMessageId);
        
        if (!cachedMessage) {
            await bot.answerCallbackQuery(query.id, { text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }
        
        const author = cachedMessage.author;
        let authorLink = '';
        
        if (author.username) {
            authorLink = `@${author.username}\nhttps://t.me/${author.username}`;
        } else {
            authorLink = `${author.first_name}\ntg://user?id=${author.id}`;
        }
        
        try {
            await bot.sendMessage(userId, `–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É:\n${authorLink}`);
            await bot.answerCallbackQuery(query.id, { text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–∫—É' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
        }
    }
});

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
bot.on('message', async (msg) => {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    if (msg.chat.id.toString() === GROUP_ID && !msg.from.is_bot && !msg.text?.startsWith('/')) {
        const settings = groupSettings.get(msg.chat.id) || { buttonsEnabled: true };
        
        if (settings.buttonsEnabled) {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à
                const originalMessageId = msg.message_id;
                messageCache.set(originalMessageId, {
                    author: {
                        id: msg.from.id,
                        username: msg.from.username,
                        first_name: msg.from.first_name,
                        last_name: msg.from.last_name
                    },
                    content: msg.text || '–ú–µ–¥–∏–∞',
                    timestamp: Date.now()
                });
                
                // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const keyboard = {
                    inline_keyboard: [[
                        { text: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `complain_${originalMessageId}` },
                        { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${originalMessageId}` }
                    ], [
                        { text: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å', callback_data: `forward_${originalMessageId}` },
                        { text: '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', callback_data: `write_${originalMessageId}` }
                    ]]
                };
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                let authorName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                if (msg.from.last_name) {
                    authorName += ` ${msg.from.last_name}`;
                }
                if (msg.from.username) {
                    authorName = `${authorName} (@${msg.from.username})`;
                }
                
                let sentMessage;
                
                // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if (msg.text) {
                    sentMessage = await bot.sendMessage(GROUP_ID, `${authorName}:\n\n${msg.text}`, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else if (msg.photo) {
                    sentMessage = await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                        caption: `${authorName}:\n\n${msg.caption || ''}`,
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else if (msg.document) {
                    sentMessage = await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                        caption: `${authorName}:\n\n${msg.caption || ''}`,
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else if (msg.video) {
                    sentMessage = await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                        caption: `${authorName}:\n\n${msg.caption || ''}`,
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else if (msg.voice) {
                    sentMessage = await bot.sendVoice(GROUP_ID, msg.voice.file_id, {
                        caption: `${authorName}:`,
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else if (msg.sticker) {
                    // –î–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–µ
                    await bot.sendSticker(GROUP_ID, msg.sticker.file_id);
                    sentMessage = await bot.sendMessage(GROUP_ID, `${authorName} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä`, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                    sentMessage = await bot.sendMessage(GROUP_ID, `${authorName} –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞`, {
                        reply_markup: keyboard,
                        parse_mode: 'HTML'
                    });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                if (sentMessage) {
                    messageCache.delete(originalMessageId);
                    messageCache.set(sentMessage.message_id, {
                        author: {
                            id: msg.from.id,
                            username: msg.from.username,
                            first_name: msg.from.first_name,
                            last_name: msg.from.last_name
                        },
                        content: msg.text || msg.caption || '–ú–µ–¥–∏–∞',
                        timestamp: Date.now(),
                        originalMessageId: originalMessageId
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º callback data –Ω–∞ –Ω–æ–≤—ã–π message_id
                    const newKeyboard = {
                        inline_keyboard: [[
                            { text: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `complain_${sentMessage.message_id}` },
                            { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${sentMessage.message_id}` }
                        ], [
                            { text: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å', callback_data: `forward_${sentMessage.message_id}` },
                            { text: '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', callback_data: `write_${sentMessage.message_id}` }
                        ]]
                    };
                    
                    await bot.editMessageReplyMarkup(newKeyboard, {
                        chat_id: GROUP_ID,
                        message_id: sentMessage.message_id
                    });
                }
                
                // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try {
                    await bot.deleteMessage(GROUP_ID, originalMessageId);
                } catch (error) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞:', error);
            }
        }
        return;
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ —Ç–µ–º—ã
    if (msg.text?.startsWith('/') || msg.chat.id.toString() === GROUP_ID) return;
    
    const chatId = msg.chat.id;
    const userConfig = userSettings.get(chatId);
    
    if (!userConfig) {
        await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        return;
    }
    
    try {
        const messageOptions = {
            message_thread_id: parseInt(userConfig.topicId)
        };
        
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º—ã
        if (msg.text) {
            await bot.sendMessage(GROUP_ID, msg.text, messageOptions);
        } else if (msg.photo) {
            await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.document) {
            await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.video) {
            await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.voice) {
            await bot.sendVoice(GROUP_ID, msg.voice.file_id, messageOptions);
        } else if (msg.sticker) {
            await bot.sendSticker(GROUP_ID, msg.sticker.file_id, messageOptions);
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.sendMessage(chatId, '‚úì', { 
            reply_to_message_id: msg.message_id 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', error);
        
        let errorMsg = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
        if (error.message.includes('message thread not found')) {
            errorMsg = `–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`;
        } else if (error.message.includes('chat not found')) {
            errorMsg = '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GROUP_ID';
        }
        
        await bot.sendMessage(chatId, errorMsg);
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
setInterval(() => {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    
    for (const [messageId, data] of messageCache.entries()) {
        if (now - data.timestamp > oneHour) {
            messageCache.delete(messageId);
            messageComplaints.delete(messageId);
        }
    }
    
    console.log(`–ö–µ—à –æ—á–∏—â–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–µ—à–µ: ${messageCache.size}`);
}, 30 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('Unhandled rejection:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
