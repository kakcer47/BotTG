const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

console.log('=== –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ===');
console.log('BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('GROUP_ID:', GROUP_ID);
console.log('WEBHOOK_URL:', WEBHOOK_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç polling)');
console.log('PORT:', PORT);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ
const userSettings = new Map();
const messageComplaints = new Map();
const messageCache = new Map();
const groupSettings = new Map(); // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø

// –°–ø–∏—Å–æ–∫ —Ç–µ–º
const TOPICS = {
    '27': '–¢–µ–º–∞ 1',
    '28': '–¢–µ–º–∞ 2', 
    '29': '–¢–µ–º–∞ 3',
    '30': '–¢–µ–º–∞ 4'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏–ª–∏ polling
app.use(express.json());

if (WEBHOOK_URL) {
    bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`);
    app.post(`/bot${BOT_TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
    console.log('‚úÖ Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
} else {
    bot.startPolling();
    console.log('‚úÖ Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
}

app.get('/', (req, res) => {
    const settings = groupSettings.get(GROUP_ID) || { interceptEnabled: true };
    
    res.send(`
        <h1>Telegram Bot Status</h1>
        <p>‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
        <p>üÜî Group ID: ${GROUP_ID}</p>
        <p>ü§ñ Bot Token: ${BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}</p>
        <p>üåê Webhook: ${WEBHOOK_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 'polling —Ä–µ–∂–∏–º'}</p>
        <p>üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞: ${settings.interceptEnabled ? '–≤–∫–ª—é—á–µ–Ω ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}</p>
        <p>üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–µ—à–µ: ${messageCache.size}</p>
        <p>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userSettings.size}</p>
        <p>üî¢ –ñ–∞–ª–æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${messageComplaints.size}</p>
        
        <h2>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h2>
        <ul>
            <li><code>/test</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫</li>
            <li><code>/info</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</li>
            <li><code>/intercept on</code> - –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)</li>
            <li><code>/intercept off</code> - –≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)</li>
            <li><code>/help</code> - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</li>
        </ul>
    `);
});

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
bot.onText(/\/test/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`[TEST] –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç ${msg.from.first_name} –≤ —á–∞—Ç–µ ${chatId}`);
    
    const keyboard = {
        inline_keyboard: [[
            { text: '–¢–µ—Å—Ç 1', callback_data: 'test_1' },
            { text: '–¢–µ—Å—Ç 2', callback_data: 'test_2' }
        ]]
    };
    
    await bot.sendMessage(chatId, 'üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫:', { reply_markup: keyboard });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
bot.onText(/\/info/, async (msg) => {
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    const userId = msg.from.id;
    
    console.log(`[INFO] Chat ID: ${chatId}, Type: ${chatType}, User: ${msg.from.first_name}`);
    
    let info = `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
üÜî Chat ID: ${chatId}
üìù –¢–∏–ø —á–∞—Ç–∞: ${chatType}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.from.first_name}
üéØ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${GROUP_ID}
‚úÖ –≠—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${chatId.toString() === GROUP_ID ? '–î–ê' : '–ù–ï–¢'}`;

    if (chatId.toString() === GROUP_ID) {
        try {
            const member = await bot.getChatMember(chatId, (await bot.getMe()).id);
            info += `\nü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${member.status}`;
            info += `\nüîë –ü—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${member.can_delete_messages ? '–î–ê' : '–ù–ï–¢'}`;
        } catch (error) {
            info += `\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: ${error.message}`;
        }
    }
    
    await bot.sendMessage(chatId, info);
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    
    const keyboard = {
        inline_keyboard: Object.entries(TOPICS).map(([id, name]) => [{
            text: name,
            callback_data: `topic_${id}`
        }])
    };
    
    await bot.sendMessage(chatId, 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', { 
        reply_markup: keyboard 
    });
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.onText(/\/intercept (on|off)/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    if (chatId.toString() !== GROUP_ID) {
        await bot.sendMessage(chatId, '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try {
        const member = await bot.getChatMember(chatId, msg.from.id);
        if (!['creator', 'administrator'].includes(member.status)) {
            await bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∂–∏–º–æ–º');
            return;
        }
    } catch (error) {
        console.error('[ADMIN CHECK ERROR]', error);
        return;
    }
    
    const action = match[1];
    const settings = groupSettings.get(chatId) || {};
    settings.interceptEnabled = (action === 'on');
    groupSettings.set(chatId, settings);
    
    await bot.sendMessage(chatId, `‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ${action === 'on' ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    console.log(`[INTERCEPT] –†–µ–∂–∏–º ${action} –¥–ª—è –≥—Ä—É–ø–ø—ã ${chatId}`);
});

// –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const isGroup = chatId.toString() === GROUP_ID;
    
    let helpText = `ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

üìã –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
‚Ä¢ /setup ID:–ù–∞–∑–≤–∞–Ω–∏–µ,ID:–ù–∞–∑–≤–∞–Ω–∏–µ - –±—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º
‚Ä¢ /test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
‚Ä¢ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –∏ –ø—Ä–∞–≤–∞—Ö –±–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;

    if (isGroup) {
        helpText += `

üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):
‚Ä¢ /intercept on/off - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ /intercept_status - —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞

üìù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç:
1. –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Üí –±–æ—Ç —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª
2. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
3. –ö–Ω–æ–ø–∫–∏: –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è, –£–¥–∞–ª–∏—Ç—å, –ü–æ–¥–µ–ª–∏—Ç—å—Å—è, –ê–≤—Ç–æ—Ä`;
    } else {
        helpText += `

üí¨ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ç–µ–º—ã:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
2. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –≥—Ä—É–ø–ø—ã`;
    }
    
    await bot.sendMessage(chatId, helpText);
});

// –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
bot.onText(/\/intercept_status/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (chatId.toString() !== GROUP_ID) return;
    
    const settings = groupSettings.get(chatId) || { interceptEnabled: true };
    const status = settings.interceptEnabled ? '–≤–∫–ª—é—á–µ–Ω ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå';
    
    await bot.sendMessage(chatId, `üìä –†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ${status}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º
bot.onText(/\/setup (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const topicsInput = match[1];
    
    try {
        const topics = {};
        topicsInput.split(',').forEach(item => {
            const [id, name] = item.split(':');
            if (id && name) {
                topics[id.trim()] = name.trim();
            }
        });
        
        if (Object.keys(topics).length > 0) {
            Object.assign(TOPICS, topics);
            await bot.sendMessage(chatId, `‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–µ–º—ã:\n${Object.entries(topics).map(([id, name]) => `‚Ä¢ ${id}: ${name}`).join('\n')}`);
        } else {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setup ID:–ù–∞–∑–≤–∞–Ω–∏–µ,ID:–ù–∞–∑–≤–∞–Ω–∏–µ');
        }
    } catch (error) {
        console.error('[SETUP ERROR]', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const userId = query.from.id;
    
    console.log(`[CALLBACK] ${data} –æ—Ç ${query.from.first_name}`);
    
    if (data.startsWith('topic_')) {
        const topicId = data.replace('topic_', '');
        const topicName = TOPICS[topicId];
        
        userSettings.set(chatId, { topicId, topicName });
        
        await bot.editMessageText(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ${topicName}\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É.`, {
            chat_id: chatId,
            message_id: query.message.message_id
        });
        
        await bot.answerCallbackQuery(query.id);
    }
    else if (data.startsWith('test_')) {
        await bot.answerCallbackQuery(query.id, { text: `–ö–Ω–æ–ø–∫–∞ ${data} —Ä–∞–±–æ—Ç–∞–µ—Ç!` });
    }
    else if (data.startsWith('complain_')) {
        const messageId = data.replace('complain_', '');
        const cached = messageCache.get(messageId);
        
        if (!messageComplaints.has(messageId)) {
            messageComplaints.set(messageId, new Set());
        }
        
        const complaints = messageComplaints.get(messageId);
        
        if (complaints.has(userId)) {
            await bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å' });
            return;
        }
        
        complaints.add(userId);
        await bot.answerCallbackQuery(query.id, { text: `‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ (${complaints.size}/5)` });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        if (complaints.size < 5) {
            const newKeyboard = {
                inline_keyboard: [[
                    { text: `–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è (${complaints.size}/5)`, callback_data: `complain_${messageId}` },
                    { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${messageId}` }
                ], [
                    { text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_${messageId}` },
                    { text: '–ê–≤—Ç–æ—Ä', callback_data: `author_${messageId}` }
                ]]
            };
            
            try {
                await bot.editMessageReplyMarkup(newKeyboard, {
                    chat_id: chatId,
                    message_id: query.message.message_id
                });
            } catch (error) {
                console.error('[EDIT KEYBOARD ERROR]', error);
            }
        }
        
        if (complaints.size >= 5) {
            try {
                await bot.deleteMessage(chatId, messageId);
                messageComplaints.delete(messageId);
                messageCache.delete(messageId);
                console.log(`[DELETE] –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ –ø–æ –∂–∞–ª–æ–±–∞–º`);
            } catch (error) {
                console.error('[DELETE ERROR]', error);
            }
        }
    }
    else if (data.startsWith('share_')) {
        const messageId = data.replace('share_', '');
        const cached = messageCache.get(messageId);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º originalMessageId –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–∞–º messageId
        const linkMessageId = cached?.originalMessageId || messageId;
        const groupIdNum = GROUP_ID.replace('-100', '');
        const messageLink = `https://t.me/c/${groupIdNum}/${linkMessageId}`;
        
        try {
            await bot.sendMessage(userId, `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${messageLink}`);
            await bot.answerCallbackQuery(query.id, { text: '‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–∫—É' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
        }
    }
    else if (data.startsWith('author_')) {
        const messageId = data.replace('author_', '');
        const cached = messageCache.get(messageId);
        
        if (cached) {
            const author = cached.author;
            let authorInfo = `üë§ –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n${author.first_name}`;
            if (author.last_name) authorInfo += ` ${author.last_name}`;
            if (author.username) authorInfo += `\n@${author.username}\nhttps://t.me/${author.username}`;
            else authorInfo += `\ntg://user?id=${author.id}`;
            
            try {
                await bot.sendMessage(userId, authorInfo);
                await bot.answerCallbackQuery(query.id, { text: '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–∫—É' });
            } catch (error) {
                await bot.answerCallbackQuery(query.id, { text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
            }
        } else {
            await bot.answerCallbackQuery(query.id, { text: '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
    }
    else if (data.startsWith('delete_')) {
        try {
            await bot.deleteMessage(chatId, query.message.message_id);
            await bot.answerCallbackQuery(query.id, { text: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å' });
        }
    }
});

// –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if (msg.text?.startsWith('/') || msg.from.is_bot) return;
    
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    console.log(`[MESSAGE] –û—Ç ${msg.from.first_name} –≤ —á–∞—Ç–µ ${chatId}: ${msg.text || '–º–µ–¥–∏–∞'}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ - –ü–ï–†–ï–•–í–ê–¢ –ò –ü–ï–†–ï–°–´–õ–ö–ê –û–¢ –ë–û–¢–ê
    if (chatId.toString() === GROUP_ID) {
        const settings = groupSettings.get(chatId) || { interceptEnabled: true };
        
        if (!settings.interceptEnabled) {
            console.log('[GROUP] –†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω');
            return;
        }
        
        console.log('[GROUP] –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç –±–æ—Ç–∞');
        
        try {
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
            let authorName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            if (msg.from.last_name) authorName += ` ${msg.from.last_name}`;
            if (msg.from.username) authorName += ` (@${msg.from.username})`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            const keyboard = {
                inline_keyboard: [[
                    { text: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `complain_${messageId}` },
                    { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${messageId}` }
                ], [
                    { text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_${messageId}` },
                    { text: '–ê–≤—Ç–æ—Ä', callback_data: `author_${messageId}` }
                ]]
            };
            
            let botMessage;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if (msg.text) {
                botMessage = await bot.sendMessage(GROUP_ID, `${authorName}:\n\n${msg.text}`, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.photo) {
                botMessage = await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                    caption: `${authorName}:\n\n${msg.caption || ''}`,
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.document) {
                botMessage = await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                    caption: `${authorName}:\n\n${msg.caption || ''}`,
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.video) {
                botMessage = await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                    caption: `${authorName}:\n\n${msg.caption || ''}`,
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.voice) {
                // –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ + —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.sendVoice(GROUP_ID, msg.voice.file_id);
                botMessage = await bot.sendMessage(GROUP_ID, `‚Üë –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç ${authorName}`, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.sticker) {
                // –î–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä + —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.sendSticker(GROUP_ID, msg.sticker.file_id);
                botMessage = await bot.sendMessage(GROUP_ID, `‚Üë –°—Ç–∏–∫–µ—Ä –æ—Ç ${authorName}`, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.audio) {
                botMessage = await bot.sendAudio(GROUP_ID, msg.audio.file_id, {
                    caption: `${authorName}:\n\n${msg.caption || ''}`,
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else if (msg.video_note) {
                // –î–ª—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫ (–∫—Ä—É–∂–æ—á–∫–æ–≤)
                await bot.sendVideoNote(GROUP_ID, msg.video_note.file_id);
                botMessage = await bot.sendMessage(GROUP_ID, `‚Üë –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ –æ—Ç ${authorName}`, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            } else {
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                botMessage = await bot.sendMessage(GROUP_ID, `${authorName} –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞`, {
                    reply_markup: keyboard,
                    parse_mode: 'HTML'
                });
            }
            
            if (botMessage) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞
                messageCache.set(botMessage.message_id, {
                    author: {
                        id: msg.from.id,
                        username: msg.from.username,
                        first_name: msg.from.first_name,
                        last_name: msg.from.last_name
                    },
                    content: msg.text || msg.caption || '–º–µ–¥–∏–∞',
                    timestamp: Date.now(),
                    originalMessageId: messageId
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                const newKeyboard = {
                    inline_keyboard: [[
                        { text: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', callback_data: `complain_${botMessage.message_id}` },
                        { text: '–£–¥–∞–ª–∏—Ç—å –¥–ª—è —Å–µ–±—è', callback_data: `delete_${botMessage.message_id}` }
                    ], [
                        { text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_${botMessage.message_id}` },
                        { text: '–ê–≤—Ç–æ—Ä', callback_data: `author_${botMessage.message_id}` }
                    ]]
                };
                
                await bot.editMessageReplyMarkup(newKeyboard, {
                    chat_id: GROUP_ID,
                    message_id: botMessage.message_id
                });
                
                console.log(`[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${botMessage.message_id}`);
            }
            
            // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await bot.deleteMessage(GROUP_ID, messageId);
                console.log(`[DELETE] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ`);
            } catch (error) {
                console.error('[DELETE ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª:', error.message);
            }
            
        } catch (error) {
            console.error('[GROUP ERROR]', error);
        }
        
        return;
    }
    
    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º—ã (–∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
    const userConfig = userSettings.get(chatId);
    
    if (!userConfig) {
        await bot.sendMessage(chatId, '‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã');
        return;
    }
    
    try {
        const messageOptions = {
            message_thread_id: parseInt(userConfig.topicId)
        };
        
        console.log(`[FORWARD] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ç–µ–º—É ${userConfig.topicId}`);
        
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (msg.text) {
            await bot.sendMessage(GROUP_ID, msg.text, messageOptions);
        } else if (msg.photo) {
            await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.document) {
            await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.video) {
            await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.voice) {
            await bot.sendVoice(GROUP_ID, msg.voice.file_id, messageOptions);
        } else if (msg.sticker) {
            await bot.sendSticker(GROUP_ID, msg.sticker.file_id, messageOptions);
        } else if (msg.audio) {
            await bot.sendAudio(GROUP_ID, msg.audio.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await bot.sendMessage(chatId, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { 
            reply_to_message_id: messageId 
        });
        
        console.log('[FORWARD] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ');
        
    } catch (error) {
        console.error('[FORWARD ERROR]', error);
        
        let errorMsg = '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
        if (error.message.includes('thread not found')) {
            errorMsg = '‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        }
        
        await bot.sendMessage(chatId, errorMsg);
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    
    for (const [messageId, data] of messageCache.entries()) {
        if (now - data.timestamp > oneHour) {
            messageCache.delete(messageId);
            messageComplaints.delete(messageId);
        }
    }
    
    console.log(`[CACHE] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–µ—à–µ: ${messageCache.size}`);
}, 30 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('[BOT ERROR]', error);
});

bot.on('polling_error', (error) => {
    console.error('[POLLING ERROR]', error);
});

process.on('unhandledRejection', (error) => {
    console.error('[UNHANDLED REJECTION]', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('=== –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï ===');
});
