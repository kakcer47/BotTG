const TelegramBot = require('node-telegram-bot-api');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_ID = process.env.GROUP_ID;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const bot = new TelegramBot(BOT_TOKEN, { 
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    console.log('Polling error:', error.message);
    if (error.message.includes('409 Conflict')) {
        console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä...');
        setTimeout(() => {
            process.exit(1);
        }, 5000);
    }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∂–∞–ª–æ–±
const userSettings = new Map();
const messageComplaints = new Map(); // messageId -> Set(userIds)
const groupSettings = new Map(); // chatId -> { moderationEnabled: true/false }

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã)
const TOPICS = {
    '27': '–¢–µ–º–∞ 1',  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    '28': '–¢–µ–º–∞ 2',  // –ü–æ–ª—É—á–∏—Ç–µ –∏–∑ —Å—Å—ã–ª–æ–∫ —Ç–µ–º
    '29': '–¢–µ–º–∞ 3',
    '30': '–¢–µ–º–∞ 4'
};

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    const keyboard = {
        inline_keyboard: Object.entries(TOPICS).map(([id, name]) => [{
            text: name,
            callback_data: `topic_${id}`
        }])
    };
    
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const userId = query.from.id;
    const messageId = query.message.message_id;
    
    if (data.startsWith('topic_')) {
        const topicId = data.replace('topic_', '');
        const topicName = TOPICS[topicId];
        
        userSettings.set(chatId, { topicId, topicName });
        
        await bot.editMessageText(`–¢–µ–º–∞: ${topicName}\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É —Ç–µ–º—É.`, {
            chat_id: chatId,
            message_id: messageId
        });
        
        await bot.answerCallbackQuery(query.id);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ
    else if (data.startsWith('complain_')) {
        const originalMessageId = data.replace('complain_', '');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∂–∞–ª–æ–± –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!messageComplaints.has(originalMessageId)) {
            messageComplaints.set(originalMessageId, new Set());
        }
        
        const complaints = messageComplaints.get(originalMessageId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (complaints.has(userId)) {
            await bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
            return;
        }
        
        complaints.add(userId);
        
        // –ï—Å–ª–∏ –∂–∞–ª–æ–± 5 –∏–ª–∏ –±–æ–ª—å—à–µ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (complaints.size >= 5) {
            try {
                await bot.deleteMessage(GROUP_ID, originalMessageId);
                await bot.answerCallbackQuery(query.id, { text: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ –∂–∞–ª–æ–±–∞–º' });
                messageComplaints.delete(originalMessageId);
            } catch (error) {
                await bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
            }
        } else {
            await bot.answerCallbackQuery(query.id, { text: `–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ (${complaints.size}/5)` });
        }
    }
    
    else if (data.startsWith('delete_')) {
        const originalMessageId = data.replace('delete_', '');
        
        try {
            // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.deleteMessage(chatId, messageId);
            await bot.answerCallbackQuery(query.id, { text: '–ü–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å' });
        }
    }
    
    else if (data.startsWith('forward_')) {
        const originalMessageId = data.replace('forward_', '');
        const groupIdNum = GROUP_ID.replace('-100', '');
        const messageLink = `https://t.me/c/${groupIdNum}/${originalMessageId}`;
        
        try {
            await bot.sendMessage(userId, `–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${messageLink}`, {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å', url: `tg://msg_url?url=${encodeURIComponent(messageLink)}` }
                    ]]
                }
            });
            await bot.answerCallbackQuery(query.id, { text: '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
        }
    }
    
    else if (data.startsWith('write_')) {
        const authorId = data.replace('write_', '');
        
        try {
            await bot.sendMessage(userId, `–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É:`, {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', url: `tg://user?id=${authorId}` }
                    ]]
                }
            });
            await bot.answerCallbackQuery(query.id, { text: '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        } catch (error) {
            await bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É' });
        }
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat ID (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
bot.onText(/\/id/, async (msg) => {
    await bot.sendMessage(msg.chat.id, `Chat ID: ${msg.chat.id}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
bot.onText(/\/restart/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
    process.exit(0);
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
bot.onText(/\/moderation (on|off)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const action = match[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
    if (chatId.toString() !== GROUP_ID) {
        await bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try {
        const member = await bot.getChatMember(chatId, msg.from.id);
        if (!['creator', 'administrator'].includes(member.status)) {
            await bot.sendMessage(chatId, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—å—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
            return;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
        return;
    }
    
    const settings = groupSettings.get(chatId) || {};
    settings.moderationEnabled = (action === 'on');
    groupSettings.set(chatId, settings);
    
    await bot.sendMessage(chatId, `–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ${action === 'on' ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º
bot.onText(/\/setup (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const topicsInput = match[1];
    
    try {
        // –§–æ—Ä–º–∞—Ç: /setup 27:–û–±—â–∏–π,28:–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞,29:–î–∏–∑–∞–π–Ω
        const topics = {};
        topicsInput.split(',').forEach(item => {
            const [id, name] = item.split(':');
            if (id && name) {
                topics[id.trim()] = name.trim();
            }
        });
        
        if (Object.keys(topics).length > 0) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –≤ –ë–î)
            Object.assign(TOPICS, topics);
            await bot.sendMessage(chatId, `–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–µ–º—ã:\n${Object.entries(topics).map(([id, name]) => `${id}: ${name}`).join('\n')}`);
        } else {
            await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setup ID:–ù–∞–∑–≤–∞–Ω–∏–µ,ID:–ù–∞–∑–≤–∞–Ω–∏–µ');
        }
    } catch (error) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º');
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –≥—Ä—É–ø–ø–µ
bot.on('message', async (msg) => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ –∏ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if (msg.chat.id.toString() === GROUP_ID && !msg.from.is_bot && !msg.text?.startsWith('/')) {
        try {
            const keyboard = {
                inline_keyboard: [[
                    { text: '‚ö†Ô∏è', callback_data: `complain_${msg.message_id}` },
                    { text: 'üóë', callback_data: `delete_${msg.message_id}` },
                    { text: '‚ÜóÔ∏è', callback_data: `forward_${msg.message_id}` },
                    { text: '‚úâÔ∏è', callback_data: `write_${msg.from.id}` }
                ]]
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.sendMessage(GROUP_ID, '‚Äé', {
                reply_to_message_id: msg.message_id,
                reply_markup: keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫:', error);
        }
        return;
    }
});

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, callback –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if (msg.text?.startsWith('/') || msg.data || msg.chat.id.toString() === GROUP_ID) return;
    
    const chatId = msg.chat.id;
    const userConfig = userSettings.get(chatId);
    
    if (!userConfig) {
        await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        return;
    }
    
    try {
        const messageOptions = {
            message_thread_id: parseInt(userConfig.topicId)
        };
        
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (msg.text) {
            await bot.sendMessage(GROUP_ID, msg.text, messageOptions);
        } else if (msg.photo) {
            await bot.sendPhoto(GROUP_ID, msg.photo[msg.photo.length - 1].file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.document) {
            await bot.sendDocument(GROUP_ID, msg.document.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.video) {
            await bot.sendVideo(GROUP_ID, msg.video.file_id, {
                ...messageOptions,
                caption: msg.caption || ''
            });
        } else if (msg.voice) {
            await bot.sendVoice(GROUP_ID, msg.voice.file_id, messageOptions);
        } else if (msg.sticker) {
            await bot.sendSticker(GROUP_ID, msg.sticker.file_id, messageOptions);
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.sendMessage(chatId, '‚úì', { 
            reply_to_message_id: msg.message_id 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:', error);
        
        let errorMsg = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
        if (error.message.includes('message thread not found')) {
            errorMsg = `–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topics –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ /setup –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`;
        } else if (error.message.includes('chat not found')) {
            errorMsg = '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GROUP_ID';
        }
        
        await bot.sendMessage(chatId, errorMsg);
    }
});

// Keep-alive: –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç
setInterval(async () => {
    try {
        await bot.getMe();
        console.log('Ping:', new Date().toISOString());
    } catch (error) {
        console.error('Ping error:', error);
    }
}, 25 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('Unhandled rejection:', error);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
